// Code generated by tygo. DO NOT EDIT.

//////////
// source: evm.go

/**
 * EthereumJsonRpcResponseError is a generic error representation for ethereum JSON-RPC responses
 */
export interface EthereumJsonRpcResponseError {
  code: number /* int */;
  message: string;
  data?: any;
}
/**
 * EthereumJsonRpcResponse is a generic handler for ethereum JSON-RPC responses
 */
export interface EthereumJsonRpcResponse {
  id: any;
  result: any;
  error?: EthereumJsonRpcResponseError;
}
/**
 * TxReceipt is generalized transaction receipt model
 */
export interface TxReceipt {
  hash: string;
  contract_address: string;
  gas_used: number /* uint64 */;
  block_hash?: string;
  block?: any /* big.Int */;
  transaction_index: number /* uint */;
  root: string;
  status: number /* uint64 */;
  cumulative_gas_used: number /* uint64 */;
  logs_bloom: any;
  logs: any[];
}
/**
 * TxTrace is generalized transaction trace model
 */
export interface TxTrace {
  result: {
    action: {
      callType?: string;
      from?: string;
      gas?: string;
      init?: string;
      input?: string;
      to?: string;
      value?: string;
    };
    blockHash?: string;
    blockNumber: number /* int */;
    result: {
      address?: string;
      code?: string;
      gasUsed?: string;
      output?: string;
    };
    error?: string;
    subtraces: number /* int */;
    traceAddress: any[];
    transactionHash?: string;
    transactionPosition: number /* int */;
    type?: string;
  }[];
}
/**
 * EthereumWebsocketSubscriptionResponse is a generic handler for ethereum websocket subscription responses
 */
export interface EthereumWebsocketSubscriptionResponse {
  id: any;
  params: { [key: string]: any};
}

//////////
// source: models.go

/**
 * Account contains the specific account user details
 */
export interface Account {
  network_id?: string /* uuid */;
  wallet_id?: string /* uuid */;
  application_id?: string /* uuid */;
  user_id?: string;
  organization_id?: string;
  vault_id?: string /* uuid */;
  key_id?: string /* uuid */;
  type?: string;
  hd_derivation_path?: string; // i.e. m/44'/60'/0'/0
  public_key?: string;
  private_key?: string;
  address: string;
  balance?: any /* big.Int */;
  accessed_at?: string /* RFC3339 */;
}
/**
 * CompiledArtifact represents compiled sourcecode
 */
export interface CompiledArtifact {
  name: string;
  abi: any[];
  assembly?: any;
  bytecode: string;
  deps?: any[];
  opcodes?: string;
  raw: any /* json.RawMessage */;
  source?: string;
  fingerprint?: string;
}
/**
 * Connector instances represent a logical connection to IPFS or other decentralized filesystem;
 * in the future it may represent a logical connection to services of other types
 */
export interface Connector {
  application_id?: string /* uuid */;
  network_id: string /* uuid */;
  organization_id?: string;
  name?: string;
  type?: string;
  status?: string;
  description?: string;
  config?: any /* json.RawMessage */;
  is_virtual?: boolean;
  accessed_at?: string /* RFC3339 */;
  details?: ConnectorDetails;
}
/**
 * ConnectorDetails is a generic representation for a type-specific enrichment of a described connector;
 * the details object may have complexity of its own, such as paginated subresults
 */
export interface ConnectorDetails {
  page?: number /* int64 */;
  rpp?: number /* int64 */;
  data?: any;
}
/**
 * Contract instances must be associated with an application identifier.
 */
export interface Contract {
  application_id?: string /* uuid */;
  network_id: string /* uuid */;
  contract_id?: string /* uuid */; // id of the contract which created the contract (or null)
  transaction_id?: string /* uuid */; // id of the transaction which deployed the contract (or null)
  name?: string;
  address?: string;
  type?: string;
  params?: any /* json.RawMessage */;
  accessed_at?: string /* RFC3339 */;
  pubsub_prefix?: string;
}
/**
 * EthereumTxTraceResponse is returned upon successful contract execution
 */
export interface EthereumTxTraceResponse {
  result: {
    action: {
      callType?: string;
      from?: string;
      gas?: string;
      init?: string;
      input?: string;
      to?: string;
      value?: string;
    };
    blockHash?: string;
    blockNumber: number /* int */;
    result: {
      address?: string;
      code?: string;
      gasUsed?: string;
      output?: string;
    };
    error?: string;
    subtraces: number /* int */;
    traceAddress: any[];
    transactionHash?: string;
    transactionPosition: number /* int */;
    type?: string;
  }[];
}
/**
 * ContractExecutionResponse is a response from the contract execution call
 */
export interface ContractExecutionResponse {
  confidence: number /* float64 */;
  ref?: string;
  response?: any;
}
/**
 * Network contains the specific Ethereum network details (mainnet, etc.)
 */
export interface Network {
  application_id?: string /* uuid */;
  user_id?: string;
  name?: string;
  description?: string;
  enabled?: boolean;
  chain_id?: string; // protocol-specific chain id
  network_id?: string /* uuid */; // network id used as the parent
  config?: any /* json.RawMessage */;
}
/**
 * NetworkLogEvent is a network-agnostic log event
 */
export interface NetworkLog {
  address?: string;
  block?: string;
  block_hash?: string;
  data?: string;
  /**
   * Index           *big.Int               `json:"log_index,omitempty"`
   */
  network_id?: string;
  timestamp?: number /* uint64 */;
  topics?: (string | undefined)[];
  transaction_hash?: string;
  type?: string;
  params?: { [key: string]: any};
}
/**
 * NetworkStatus provides network-agnostic status
 */
export interface NetworkStatus {
  block?: number /* uint64 */; // current block
  chain_id?: string; // the chain id
  height?: number /* uint64 */; // total height of the blockchain; null after syncing completed
  last_block_at?: number /* uint64 */; // unix timestamp of the last block; i.e., when the last block was collated
  peer_count?: number /* uint64 */; // number of peers connected to the JSON-RPC client
  protocol_version?: string; // protocol version
  state?: string; // i.e., syncing, synced, etc
  syncing?: boolean; // when true, the network is in the process of syncing the ledger; available functionaltiy will be network-specific
  meta?: { [key: string]: any}; // network-specific metadata
}
/**
 * Oracle instances are smart contracts whose terms are fulfilled
 * writing data from a configured feed onto the blockchain
 */
export interface Oracle {
  application_id?: string /* uuid */;
  network_id: string /* uuid */;
  contract_id: string /* uuid */;
  name?: string;
  feed_url?: any /* url.URL */;
  params?: any /* json.RawMessage */;
  attachment_ids: (string /* uuid */ | undefined)[];
}
/**
 * Token contract
 */
export interface Token {
  application_id?: string /* uuid */;
  network_id: string /* uuid */;
  contract_id?: string /* uuid */;
  sale_contract_id?: string /* uuid */;
  name?: string;
  symbol?: string;
  decimals: number /* uint64 */;
  address?: string; // network-specific token contract address
  sale_address?: string; // non-null if token sale contract is specified
  accessed_at?: string /* RFC3339 */;
}
/**
 * Transaction instances are associated with a signing wallet and exactly one matching instance
 * of either an a) application identifier or b) user identifier.
 */
export interface Transaction {
  network_id?: string /* uuid */;
  /**
   * Application or user id, if populated, is the entity for which the transaction was custodially signed and broadcast
   */
  application_id?: string /* uuid */;
  user_id?: string;
  /**
   * Account or HD wallet which custodially signed the transaction; when an HD wallet is used, if no HD derivation path is provided,
   * the most recently derived non-zero account is used to sign
   */
  account_id?: string /* uuid */;
  wallet_id?: string /* uuid */;
  hd_derivation_path?: string;
  /**
   * Network-agnostic tx fields
   */
  signer?: string;
  to?: string;
  value?: TxValue;
  data?: string;
  hash?: string;
  status?: string;
  params?: any /* json.RawMessage */;
  ref?: string;
  description?: string;
  /**
   * Ephemeral fields for managing the tx/rx and tracing lifecycles
   */
  traces?: any;
  /**
   * Transaction metadata/instrumentation
   */
  block?: number /* uint64 */;
  block_timestamp?: string /* RFC3339 */; // timestamp when the tx was finalized on-chain, according to its tx receipt
  broadcast_at?: string /* RFC3339 */; // timestamp when the tx was broadcast to the network
  finalized_at?: string /* RFC3339 */; // timestamp when the tx was finalized on-platform
  published_at?: string /* RFC3339 */; // timestamp when the tx was published to NATS cluster
  queue_latency?: number /* uint64 */; // broadcast_at - published_at (in millis) -- the amount of time between when a message is enqueued to the NATS broker and when it is broadcast to the network
  network_latency?: number /* uint64 */; // finalized_at - broadcast_at (in millis) -- the amount of time between when a message is broadcast to the network and when it is finalized on-chain
  e2e_latency?: number /* uint64 */; // finalized_at - published_at (in millis) -- the amount of time between when a message is published to the NATS broker and when it is finalized on-chain
}
/**
 * RPCResponse represents a generic json-rpc response
 */
export interface RPCResponse {
  id: any;
  jsonrpc: string;
  result: { [key: string]: any};
}
/**
 * TxValue provides JSON marshaling and gorm driver support for wrapping/unwrapping big.Int
 */
export interface TxValue {
}
/**
 * Wallet contains the specific wallet details
 */
export interface Wallet {
  wallet_id?: string /* uuid */;
  application_id?: string /* uuid */;
  user_id?: string;
  organization_id?: string;
  vault_id?: string /* uuid */;
  key_id?: string /* uuid */;
  path?: string;
  purpose?: number /* int */;
  mnemonic?: string;
  public_key?: string;
  private_key?: string;
}

//////////
// source: tendermint.go

/**
 * BaseledgerBlockHeader
 */
export interface BaseledgerBlockHeaderResponse {
  type: string;
  value: {
    header: {
      app_hash: string;
      chain_id: string;
      consensus_hash: string;
      data_hash: string;
      evidence_hash: string;
      height: string;
      last_block_id: {
        hash: string;
        parts: {
          hash: string;
          total: number /* int */;
        };
      };
      last_commit_hash: string;
      last_results_hash: string;
      next_validators_hash: string;
      proposer_address: string;
      time: string /* RFC3339 */;
      validators_hash: string;
      version: {
        app: string;
        block: string;
      };
    };
    num_txs: string;
    result_begin_block: {
      events: {
        attributes: {
          index: boolean;
          key: string;
          value: string;
        }[];
        type: string;
      }[];
    };
    result_end_block: {
      validator_updates: any;
    };
  };
}
/**
 * TendermintBlockHeader represents a tendermint block header rpc response
 */
export interface TendermintBlockHeader {
  version: {
    block: string;
  };
  chain_id: string;
  height: string;
  time: string /* RFC3339 */;
  last_block_id: {
    hash: string;
    parts: {
      total: number /* int */;
      hash: string;
    };
  };
  last_commit_hash: string;
  data_hash: string;
  validators_hash: string;
  next_validators_hash: string;
  consensus_hash: string;
  app_hash: string;
  last_results_hash: string;
  evidence_hash: string;
  proposer_address: string;
}
/**
 * TendermintBlock represents a tendermint full block rpc response
 */
export interface TendermintBlock {
  jsonrpc: string;
  id: number /* int */;
  result: {
    block_id: {
      hash: string;
      parts: {
        total: number /* int */;
        hash: string;
      };
    };
    block: {
      header?: TendermintBlockHeader;
      data: {
        txs: string[];
      };
      evidence: {
        evidence: any[];
      };
      last_commit: {
        height: string;
        round: number /* int */;
        block_id: {
          hash: string;
          parts: {
            total: number /* int */;
            hash: string;
          };
        };
        signatures: {
          block_id_flag: number /* int */;
          validator_address: string;
          timestamp: string /* RFC3339 */;
          signature: string;
        }[];
      };
    };
  };
}
/**
 * TendermintTx represents a tendermint transaction rpc response
 */
export interface TendermintTx {
  jsonrpc: string;
  id: number /* int */;
  result: {
    hash: string;
    height: string;
    index: number /* int */;
    tx_result: {
      code: number /* int */;
      data: string;
      log: string;
      info: string;
      gas_wanted: string;
      gas_used: string;
      events: {
        type: string;
        attributes: {
          key: string;
          value: string;
          index: boolean;
        }[];
      }[];
      codespace: string;
    };
    tx: string;
  };
}
