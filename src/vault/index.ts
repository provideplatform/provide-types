// Code generated by tygo. DO NOT EDIT.

//////////
// source: models.go

/**
 * MaxHDIteration is the maximum HD account index
 */
export const MaxHDIteration = 4294967295;
/**
 * KeyTypeAsymmetric asymmetric key type
 */
export const KeyTypeAsymmetric = "asymmetric";
/**
 * KeyTypeSymmetric symmetric key type
 */
export const KeyTypeSymmetric = "symmetric";
/**
 * KeyUsageEncryptDecrypt encrypt/decrypt usage
 */
export const KeyUsageEncryptDecrypt = "encrypt/decrypt";
/**
 * KeyUsageSignVerify sign/verify usage
 */
export const KeyUsageSignVerify = "sign/verify";
/**
 * KeySpecAES256GCM AES-256-GCM key spec
 */
export const KeySpecAES256GCM = "AES-256-GCM";
/**
 * KeySpecChaCha20 ChaCha20 key spec
 */
export const KeySpecChaCha20 = "ChaCha20";
/**
 * KeySpecECCBabyJubJub babyJubJub key spec
 */
export const KeySpecECCBabyJubJub = "babyJubJub";
/**
 * KeySpecECCBIP39 BIP39 key spec
 */
export const KeySpecECCBIP39 = "BIP39";
/**
 * KeySpecECCC25519 C25519 key spec
 */
export const KeySpecECCC25519 = "C25519";
/**
 * KeySpecECCEd25519 Ed25519 key spec
 */
export const KeySpecECCEd25519 = "Ed25519";
/**
 * KeySpecECCSecp256k1 secp256k1 key spec
 */
export const KeySpecECCSecp256k1 = "secp256k1";
/**
 * NonceSizeSymmetric chacha20 & aes256 encrypt/decrypt nonce size
 */
export const NonceSizeSymmetric = 12;
/**
 * KeySpecRSA2048 rsa 2048 key spec
 */
export const KeySpecRSA2048 = "RSA-2048";
/**
 * KeyBits2048 is the bit length for 2048-bit keys
 */
export const KeyBits2048 = 2048;
/**
 * KeyBits3072 is the bit length for 3072-bit keys
 */
export const KeyBits3072 = 3072;
/**
 * KeyBits4096 is the bit length for 4096-bit keys
 */
export const KeyBits4096 = 4096;
/**
 * KeySpecRSA3072 rsa 3072 key spec
 */
export const KeySpecRSA3072 = "RSA-3072";
/**
 * KeySpecRSA4096 rsa 4096 key spec
 */
export const KeySpecRSA4096 = "RSA-4096";
/**
 * Vault provides secure key management
 */
export interface Vault {
  name?: string;
  description?: string;
}
/**
 * Key represents a symmetric or asymmetric signing key
 */
export interface Key {
  vault_id?: string /* uuid */;
  type?: string; // symmetric or asymmetric
  usage?: string;
  spec?: string;
  name?: string;
  description?: string;
  /**
   * these fields are only populated for ephemeral keys
   */
  ephemeral?: boolean;
  private_key?: string;
  seed?: string;
  address?: string;
  hd_derivation_path?: string;
  public_key?: string;
}
/**
 * Secret represents a string, encrypted by the vault master key
 */
export interface Secret {
  vault_id?: string /* uuid */;
  type?: string; // arbitrary secret type
  name?: string;
  description?: string;
  value?: string;
}
/**
 * DetachedEncryptDecryptRequestResponse contains the data to be encrypted/decrypted
 */
export interface DetachedEncryptDecryptRequestResponse {
  data?: string;
  nonce?: string; // optional nonce parameter
  public_key?: string;
  spec?: string;
}
/**
 * EncryptDecryptRequestResponse contains the data (i.e., encrypted or decrypted) and an optional nonce
 */
export interface EncryptDecryptRequestResponse {
  data: string;
  nonce?: string;
}
/**
 * SignRequest contains a message to be signed
 */
export interface SignRequest {
  message: string;
}
/**
 * SignResponse contains the signature for the message
 */
export interface SignResponse {
  signature?: string;
  address?: string;
  hd_derivation_path?: string;
}
/**
 * VerifyRequest contains the message and signature for verification
 */
export interface VerifyRequest {
  message: string;
  signature: string;
}
/**
 * VerifyResponse contains a flag indicating if the signature was verified
 */
export interface VerifyResponse {
  verified: boolean;
}
/**
 * BLSAggregateRequestResponse provides the BLS sig information to aggregate n BLS signatures into one BLS signature
 */
export interface BLSAggregateRequestResponse {
  signatures?: (string | undefined)[];
  aggregate_signature?: string;
}
/**
 * SealUnsealRequestResponse provides the unseal information
 */
export interface SealUnsealRequestResponse {
  key?: string;
  validation_hash?: string;
}
